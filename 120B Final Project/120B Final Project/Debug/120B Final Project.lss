
120B Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00000d90  00000e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d90  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  00800224  00800224  00000f68  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  00000f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001abe  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009af  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000181a  00000000  00000000  000035e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004c4  00000000  00000000  00004e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000af9  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a3b  00000000  00000000  00005dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  000067f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
   2:	00 00       	nop
   4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
	...

0000008c <StartImg>:
	...
  e8:	00 08 f8 f8 48 e8 e8 08 00 00 20 00 f8 f8 20 20     ....H..... ...  
  f8:	00 00 00 00 c0 a0 60 20 20 60 60 00 04 fc fc 60     ......`  ``....`
 108:	20 20 e0 c0 00 00 00 00 3c 2c 3c 00 00 00 20 e0       ......<,<... .
 118:	80 60 20 20 e0 c0 00 00 00 00 00 00 00 00 00 00     .`  ............
	...
 13c:	00 04 07 07 04 04 04 04 02 00 00 00 03 07 04 04     ................
 14c:	02 00 00 00 03 07 04 04 04 02 00 00 04 07 07 04     ................
 15c:	00 04 07 07 04 00 00 00 00 00 00 00 00 00 04 07     ................
 16c:	07 00 00 04 07 07 04 00 00 00 00 00 00 00 00 00     ................
	...
 194:	00 00 60 f0 90 90 90 b0 30 00 00 08 f8 f8 00 40     ..`.....0......@
 1a4:	40 40 00 00 80 c0 40 40 40 c0 80 00 40 40 f0 f0     @@....@@@...@@..
 1b4:	40 40 40 00 00 00 80 c0 c0 40 40 c0 c0 00 08 f8     @@@......@@.....
 1c4:	f8 c0 40 40 c0 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
 1e8:	00 00 0e 0c 08 08 08 07 0f 00 00 08 0f 0f 03 0f     ................
 1f8:	0c 08 08 00 06 0d 09 09 09 0d 04 00 00 00 07 0f     ................
 208:	08 08 04 04 00 00 07 0f 08 08 08 04 00 00 08 0f     ................
 218:	0f 08 00 08 0f 0f 08 00 00 00 00 00 00 00 00 00     ................
	...

00000284 <Pencil>:
 284:	0e 0a 0e 0a 0a 0a 0a 04                             ........

0000028c <Eraser>:
 28c:	02 06 0a 0a 0a 0a 0c 08                             ........

00000294 <ClearAll16x2>:
 294:	1f 11 0e 0a 0c 0a 11 1f                             ........

0000029c <__ctors_end>:
 29c:	11 24       	eor	r1, r1
 29e:	1f be       	out	0x3f, r1	; 63
 2a0:	cf ef       	ldi	r28, 0xFF	; 255
 2a2:	d0 e4       	ldi	r29, 0x40	; 64
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
 2a8:	12 e0       	ldi	r17, 0x02	; 2
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b1 e0       	ldi	r27, 0x01	; 1
 2ae:	e0 e9       	ldi	r30, 0x90	; 144
 2b0:	fd e0       	ldi	r31, 0x0D	; 13
 2b2:	00 e0       	ldi	r16, 0x00	; 0
 2b4:	0b bf       	out	0x3b, r16	; 59
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
 2b8:	07 90       	elpm	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	a4 32       	cpi	r26, 0x24	; 36
 2be:	b1 07       	cpc	r27, r17
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
 2c2:	24 e0       	ldi	r18, 0x04	; 4
 2c4:	a4 e2       	ldi	r26, 0x24	; 36
 2c6:	b2 e0       	ldi	r27, 0x02	; 2
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
 2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
 2cc:	a6 33       	cpi	r26, 0x36	; 54
 2ce:	b2 07       	cpc	r27, r18
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
 2d2:	7a d2       	rcall	.+1268   	; 0x7c8 <main>
 2d4:	5b c5       	rjmp	.+2742   	; 0xd8c <_exit>

000002d6 <__bad_interrupt>:
 2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <LCD_ClearScreen>:
        Drawing_State = Draw_Start;
        break;
    }

    return Drawing_State;
};
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	18 d0       	rcall	.+48     	; 0x314 <LCD_WriteCommand>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <LCD_init>:
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	84 e6       	ldi	r24, 0x64	; 100
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a7 d0       	rcall	.+334    	; 0x446 <delay_ms>
 2f8:	88 e3       	ldi	r24, 0x38	; 56
 2fa:	0c d0       	rcall	.+24     	; 0x314 <LCD_WriteCommand>
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	0a d0       	rcall	.+20     	; 0x314 <LCD_WriteCommand>
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	08 d0       	rcall	.+16     	; 0x314 <LCD_WriteCommand>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	06 d0       	rcall	.+12     	; 0x314 <LCD_WriteCommand>
 308:	8a e0       	ldi	r24, 0x0A	; 10
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	9c d0       	rcall	.+312    	; 0x446 <delay_ms>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <LCD_WriteCommand>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	8b e2       	ldi	r24, 0x2B	; 43
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	2b e2       	ldi	r18, 0x2B	; 43
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	2f 7b       	andi	r18, 0xBF	; 191
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
 332:	88 e2       	ldi	r24, 0x28	; 40
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	29 81       	ldd	r18, Y+1	; 0x01
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
 33c:	8b e2       	ldi	r24, 0x2B	; 43
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	2b e2       	ldi	r18, 0x2B	; 43
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	f9 01       	movw	r30, r18
 346:	20 81       	ld	r18, Z
 348:	20 68       	ori	r18, 0x80	; 128
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
 34e:	00 00       	nop
 350:	8b e2       	ldi	r24, 0x2B	; 43
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2b e2       	ldi	r18, 0x2B	; 43
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	20 81       	ld	r18, Z
 35c:	2f 77       	andi	r18, 0x7F	; 127
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	6f d0       	rcall	.+222    	; 0x446 <delay_ms>
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <LCD_WriteData>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	8b e2       	ldi	r24, 0x2B	; 43
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	2b e2       	ldi	r18, 0x2B	; 43
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	20 64       	ori	r18, 0x40	; 64
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	29 81       	ldd	r18, Y+1	; 0x01
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18
 398:	8b e2       	ldi	r24, 0x2B	; 43
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	2b e2       	ldi	r18, 0x2B	; 43
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	f9 01       	movw	r30, r18
 3a2:	20 81       	ld	r18, Z
 3a4:	20 68       	ori	r18, 0x80	; 128
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	00 00       	nop
 3ac:	8b e2       	ldi	r24, 0x2B	; 43
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	2b e2       	ldi	r18, 0x2B	; 43
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	2f 77       	andi	r18, 0x7F	; 127
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	41 d0       	rcall	.+130    	; 0x446 <delay_ms>
 3c4:	0f 90       	pop	r0
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <LCD_DisplayString>:
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <LCD_DisplayString+0x6>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <LCD_DisplayString+0x8>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	7c 83       	std	Y+4, r23	; 0x04
 3dc:	6b 83       	std	Y+3, r22	; 0x03
 3de:	7c df       	rcall	.-264    	; 0x2d8 <LCD_ClearScreen>
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	89 83       	std	Y+1, r24	; 0x01
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	98 0f       	add	r25, r24
 3ec:	99 83       	std	Y+1, r25	; 0x01
 3ee:	17 d0       	rcall	.+46     	; 0x41e <LCD_Cursor>
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	9c 81       	ldd	r25, Y+4	; 0x04
 3f4:	9c 01       	movw	r18, r24
 3f6:	2f 5f       	subi	r18, 0xFF	; 255
 3f8:	3f 4f       	sbci	r19, 0xFF	; 255
 3fa:	3c 83       	std	Y+4, r19	; 0x04
 3fc:	2b 83       	std	Y+3, r18	; 0x03
 3fe:	fc 01       	movw	r30, r24
 400:	80 81       	ld	r24, Z
 402:	b6 df       	rcall	.-148    	; 0x370 <LCD_WriteData>
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	59 f7       	brne	.-42     	; 0x3e6 <LCD_DisplayString+0x1a>
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <LCD_Cursor>:
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	1f 92       	push	r1
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	81 31       	cpi	r24, 0x11	; 17
 42e:	20 f4       	brcc	.+8      	; 0x438 <LCD_Cursor+0x1a>
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	81 58       	subi	r24, 0x81	; 129
 434:	6f df       	rcall	.-290    	; 0x314 <LCD_WriteCommand>
 436:	03 c0       	rjmp	.+6      	; 0x43e <LCD_Cursor+0x20>
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	81 55       	subi	r24, 0x51	; 81
 43c:	6b df       	rcall	.-298    	; 0x314 <LCD_WriteCommand>
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <delay_ms>:
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	00 d0       	rcall	.+0      	; 0x44c <delay_ms+0x6>
 44c:	00 d0       	rcall	.+0      	; 0x44e <delay_ms+0x8>
 44e:	00 d0       	rcall	.+0      	; 0x450 <delay_ms+0xa>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	9e 83       	std	Y+6, r25	; 0x06
 456:	8d 83       	std	Y+5, r24	; 0x05
 458:	1a 82       	std	Y+2, r1	; 0x02
 45a:	19 82       	std	Y+1, r1	; 0x01
 45c:	13 c0       	rjmp	.+38     	; 0x484 <delay_ms+0x3e>
 45e:	1c 82       	std	Y+4, r1	; 0x04
 460:	1b 82       	std	Y+3, r1	; 0x03
 462:	06 c0       	rjmp	.+12     	; 0x470 <delay_ms+0x2a>
 464:	00 00       	nop
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	9c 83       	std	Y+4, r25	; 0x04
 46e:	8b 83       	std	Y+3, r24	; 0x03
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	9c 81       	ldd	r25, Y+4	; 0x04
 474:	87 30       	cpi	r24, 0x07	; 7
 476:	93 40       	sbci	r25, 0x03	; 3
 478:	ac f3       	brlt	.-22     	; 0x464 <delay_ms+0x1e>
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	9a 83       	std	Y+2, r25	; 0x02
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	29 81       	ldd	r18, Y+1	; 0x01
 486:	3a 81       	ldd	r19, Y+2	; 0x02
 488:	8d 81       	ldd	r24, Y+5	; 0x05
 48a:	9e 81       	ldd	r25, Y+6	; 0x06
 48c:	28 17       	cp	r18, r24
 48e:	39 07       	cpc	r19, r25
 490:	34 f3       	brlt	.-52     	; 0x45e <delay_ms+0x18>
 492:	26 96       	adiw	r28, 0x06	; 6
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <LcdInit>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	85 e2       	ldi	r24, 0x25	; 37
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	25 e2       	ldi	r18, 0x25	; 37
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	f9 01       	movw	r30, r18
 4b6:	20 81       	ld	r18, Z
 4b8:	22 60       	ori	r18, 0x02	; 2
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
 4be:	84 e2       	ldi	r24, 0x24	; 36
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	24 e2       	ldi	r18, 0x24	; 36
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	20 81       	ld	r18, Z
 4ca:	27 6a       	ori	r18, 0xA7	; 167
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
 4d0:	62 d1       	rcall	.+708    	; 0x796 <Delay>
 4d2:	85 e2       	ldi	r24, 0x25	; 37
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	25 e2       	ldi	r18, 0x25	; 37
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	2d 7f       	andi	r18, 0xFD	; 253
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18
 4e4:	58 d1       	rcall	.+688    	; 0x796 <Delay>
 4e6:	85 e2       	ldi	r24, 0x25	; 37
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	25 e2       	ldi	r18, 0x25	; 37
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	22 60       	ori	r18, 0x02	; 2
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
 4f8:	8c e4       	ldi	r24, 0x4C	; 76
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	20 e5       	ldi	r18, 0x50	; 80
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
 502:	85 e2       	ldi	r24, 0x25	; 37
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	25 e2       	ldi	r18, 0x25	; 37
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	24 60       	ori	r18, 0x04	; 4
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	81 e2       	ldi	r24, 0x21	; 33
 51a:	f9 d0       	rcall	.+498    	; 0x70e <LcdSend>
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	88 ec       	ldi	r24, 0xC8	; 200
 522:	f5 d0       	rcall	.+490    	; 0x70e <LcdSend>
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	f1 d0       	rcall	.+482    	; 0x70e <LcdSend>
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	83 e1       	ldi	r24, 0x13	; 19
 532:	ed d0       	rcall	.+474    	; 0x70e <LcdSend>
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	80 e2       	ldi	r24, 0x20	; 32
 53a:	e9 d0       	rcall	.+466    	; 0x70e <LcdSend>
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	8c e0       	ldi	r24, 0x0C	; 12
 542:	e5 d0       	rcall	.+458    	; 0x70e <LcdSend>
 544:	88 ef       	ldi	r24, 0xF8	; 248
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <LoWaterMark+0x1>
 54c:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <LoWaterMark>
 550:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <HiWaterMark+0x1>
 554:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <HiWaterMark>
 558:	1b d0       	rcall	.+54     	; 0x590 <LcdClear>
 55a:	56 d0       	rcall	.+172    	; 0x608 <LcdUpdate>
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <LcdContrast>:
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	1f 92       	push	r1
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	81 e2       	ldi	r24, 0x21	; 33
 574:	cc d0       	rcall	.+408    	; 0x70e <LcdSend>
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	c7 d0       	rcall	.+398    	; 0x70e <LcdSend>
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	80 e2       	ldi	r24, 0x20	; 32
 586:	c3 d0       	rcall	.+390    	; 0x70e <LcdSend>
 588:	0f 90       	pop	r0
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <LcdClear>:
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	48 ef       	ldi	r20, 0xF8	; 248
 59a:	51 e0       	ldi	r21, 0x01	; 1
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	84 e2       	ldi	r24, 0x24	; 36
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	87 d3       	rcall	.+1806   	; 0xcb4 <memset>
 5a6:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <LoWaterMark+0x1>
 5aa:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LoWaterMark>
 5ae:	87 ef       	ldi	r24, 0xF7	; 247
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <HiWaterMark+0x1>
 5b6:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <HiWaterMark>
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <UpdateLcd>
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <LcdImage>:
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <LcdImage+0x6>
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	9a 83       	std	Y+2, r25	; 0x02
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	48 ef       	ldi	r20, 0xF8	; 248
 5da:	51 e0       	ldi	r21, 0x01	; 1
 5dc:	bc 01       	movw	r22, r24
 5de:	84 e2       	ldi	r24, 0x24	; 36
 5e0:	92 e0       	ldi	r25, 0x02	; 2
 5e2:	5f d3       	rcall	.+1726   	; 0xca2 <memcpy_P>
 5e4:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <LoWaterMark+0x1>
 5e8:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LoWaterMark>
 5ec:	87 ef       	ldi	r24, 0xF7	; 247
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <HiWaterMark+0x1>
 5f4:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <HiWaterMark>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <UpdateLcd>
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <LcdUpdate>:
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	00 d0       	rcall	.+0      	; 0x60e <LcdUpdate+0x6>
 60e:	00 d0       	rcall	.+0      	; 0x610 <LcdUpdate+0x8>
 610:	00 d0       	rcall	.+0      	; 0x612 <LcdUpdate+0xa>
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LoWaterMark>
 61a:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LoWaterMark+0x1>
 61e:	99 23       	and	r25, r25
 620:	2c f4       	brge	.+10     	; 0x62c <LcdUpdate+0x24>
 622:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <LoWaterMark+0x1>
 626:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LoWaterMark>
 62a:	0d c0       	rjmp	.+26     	; 0x646 <LcdUpdate+0x3e>
 62c:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LoWaterMark>
 630:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LoWaterMark+0x1>
 634:	88 3f       	cpi	r24, 0xF8	; 248
 636:	91 40       	sbci	r25, 0x01	; 1
 638:	34 f0       	brlt	.+12     	; 0x646 <LcdUpdate+0x3e>
 63a:	87 ef       	ldi	r24, 0xF7	; 247
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <LoWaterMark+0x1>
 642:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <LoWaterMark>
 646:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <HiWaterMark>
 64a:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <HiWaterMark+0x1>
 64e:	99 23       	and	r25, r25
 650:	2c f4       	brge	.+10     	; 0x65c <LcdUpdate+0x54>
 652:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <HiWaterMark+0x1>
 656:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <HiWaterMark>
 65a:	0d c0       	rjmp	.+26     	; 0x676 <LcdUpdate+0x6e>
 65c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <HiWaterMark>
 660:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <HiWaterMark+0x1>
 664:	88 3f       	cpi	r24, 0xF8	; 248
 666:	91 40       	sbci	r25, 0x01	; 1
 668:	34 f0       	brlt	.+12     	; 0x676 <LcdUpdate+0x6e>
 66a:	87 ef       	ldi	r24, 0xF7	; 247
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <HiWaterMark+0x1>
 672:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <HiWaterMark>
 676:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LoWaterMark>
 67a:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LoWaterMark+0x1>
 67e:	24 e5       	ldi	r18, 0x54	; 84
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	b9 01       	movw	r22, r18
 684:	fb d2       	rcall	.+1526   	; 0xc7c <__divmodhi4>
 686:	80 68       	ori	r24, 0x80	; 128
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	40 d0       	rcall	.+128    	; 0x70e <LcdSend>
 68e:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LoWaterMark>
 692:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LoWaterMark+0x1>
 696:	24 e5       	ldi	r18, 0x54	; 84
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	b9 01       	movw	r22, r18
 69c:	ef d2       	rcall	.+1502   	; 0xc7c <__divmodhi4>
 69e:	cb 01       	movw	r24, r22
 6a0:	80 64       	ori	r24, 0x40	; 64
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	33 d0       	rcall	.+102    	; 0x70e <LcdSend>
 6a8:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LoWaterMark>
 6ac:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LoWaterMark+0x1>
 6b0:	9a 83       	std	Y+2, r25	; 0x02
 6b2:	89 83       	std	Y+1, r24	; 0x01
 6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <LcdUpdate+0xca>
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	9a 81       	ldd	r25, Y+2	; 0x02
 6ba:	8c 5d       	subi	r24, 0xDC	; 220
 6bc:	9d 4f       	sbci	r25, 0xFD	; 253
 6be:	fc 01       	movw	r30, r24
 6c0:	80 81       	ld	r24, Z
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	23 d0       	rcall	.+70     	; 0x70e <LcdSend>
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	9a 81       	ldd	r25, Y+2	; 0x02
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	9a 83       	std	Y+2, r25	; 0x02
 6d0:	89 83       	std	Y+1, r24	; 0x01
 6d2:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <HiWaterMark>
 6d6:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <HiWaterMark+0x1>
 6da:	29 81       	ldd	r18, Y+1	; 0x01
 6dc:	3a 81       	ldd	r19, Y+2	; 0x02
 6de:	82 17       	cp	r24, r18
 6e0:	93 07       	cpc	r25, r19
 6e2:	4c f7       	brge	.-46     	; 0x6b6 <LcdUpdate+0xae>
 6e4:	87 ef       	ldi	r24, 0xF7	; 247
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <LoWaterMark+0x1>
 6ec:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <LoWaterMark>
 6f0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <HiWaterMark+0x1>
 6f4:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <HiWaterMark>
 6f8:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <UpdateLcd>
 6fc:	26 96       	adiw	r28, 0x06	; 6
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <LcdSend>:
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	00 d0       	rcall	.+0      	; 0x714 <LcdSend+0x6>
 714:	1f 92       	push	r1
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	7b 83       	std	Y+3, r23	; 0x03
 71e:	6a 83       	std	Y+2, r22	; 0x02
 720:	85 e2       	ldi	r24, 0x25	; 37
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	25 e2       	ldi	r18, 0x25	; 37
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	f9 01       	movw	r30, r18
 72a:	20 81       	ld	r18, Z
 72c:	2b 7f       	andi	r18, 0xFB	; 251
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	9b 81       	ldd	r25, Y+3	; 0x03
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	51 f4       	brne	.+20     	; 0x74e <LcdSend+0x40>
 73a:	85 e2       	ldi	r24, 0x25	; 37
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	25 e2       	ldi	r18, 0x25	; 37
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	f9 01       	movw	r30, r18
 744:	20 81       	ld	r18, Z
 746:	21 60       	ori	r18, 0x01	; 1
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
 74c:	09 c0       	rjmp	.+18     	; 0x760 <LcdSend+0x52>
 74e:	85 e2       	ldi	r24, 0x25	; 37
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	25 e2       	ldi	r18, 0x25	; 37
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	f9 01       	movw	r30, r18
 758:	20 81       	ld	r18, Z
 75a:	2e 7f       	andi	r18, 0xFE	; 254
 75c:	fc 01       	movw	r30, r24
 75e:	20 83       	st	Z, r18
 760:	8e e4       	ldi	r24, 0x4E	; 78
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	29 81       	ldd	r18, Y+1	; 0x01
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
 76a:	00 00       	nop
 76c:	8d e4       	ldi	r24, 0x4D	; 77
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	fc 01       	movw	r30, r24
 772:	80 81       	ld	r24, Z
 774:	88 23       	and	r24, r24
 776:	d4 f7       	brge	.-12     	; 0x76c <LcdSend+0x5e>
 778:	85 e2       	ldi	r24, 0x25	; 37
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	25 e2       	ldi	r18, 0x25	; 37
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	f9 01       	movw	r30, r18
 782:	20 81       	ld	r18, Z
 784:	24 60       	ori	r18, 0x04	; 4
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <Delay>:
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	00 d0       	rcall	.+0      	; 0x79c <Delay+0x6>
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	93 e8       	ldi	r25, 0x83	; 131
 7a4:	9a 83       	std	Y+2, r25	; 0x02
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <Delay+0x1e>
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	9a 81       	ldd	r25, Y+2	; 0x02
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	9a 83       	std	Y+2, r25	; 0x02
 7b2:	89 83       	std	Y+1, r24	; 0x01
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	9a 81       	ldd	r25, Y+2	; 0x02
 7b8:	81 15       	cp	r24, r1
 7ba:	9d 47       	sbci	r25, 0x7D	; 125
 7bc:	b4 f3       	brlt	.-20     	; 0x7aa <Delay+0x14>
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <main>:

int main(void)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	e9 97       	sbiw	r28, 0x39	; 57
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	f8 94       	cli
 7d6:	de bf       	out	0x3e, r29	; 62
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	cd bf       	out	0x3d, r28	; 61
    //PORT A
    DDRA = 0x00; //Configures Port -- 00 for Input, FF for Output
 7dc:	81 e2       	ldi	r24, 0x21	; 33
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	fc 01       	movw	r30, r24
 7e2:	10 82       	st	Z, r1
    PORTA = 0xFF; //Initializes the Value in the Port
 7e4:	82 e2       	ldi	r24, 0x22	; 34
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18

    //PORT B
    DDRB = 0xFF; //Configures Port -- 00 for Input, FF for Output
 7ee:	84 e2       	ldi	r24, 0x24	; 36
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 83       	st	Z, r18
    PORTB = 0x00; //Initializes the Value in the Port
 7f8:	85 e2       	ldi	r24, 0x25	; 37
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	fc 01       	movw	r30, r24
 7fe:	10 82       	st	Z, r1

    //PORT C
    DDRC = 0xFF; //Configures Port -- 00 for Input, FF for Output
 800:	87 e2       	ldi	r24, 0x27	; 39
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	2f ef       	ldi	r18, 0xFF	; 255
 806:	fc 01       	movw	r30, r24
 808:	20 83       	st	Z, r18
    PORTC = 0x00; //Initializes the Value in the Port
 80a:	88 e2       	ldi	r24, 0x28	; 40
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	10 82       	st	Z, r1

    //PORT D
    DDRD = 0xFF; //Configures Port -- 00 for Input, FF for Output
 812:	8a e2       	ldi	r24, 0x2A	; 42
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	2f ef       	ldi	r18, 0xFF	; 255
 818:	fc 01       	movw	r30, r24
 81a:	20 83       	st	Z, r18
    PORTD = 0x00; //Initializes the Value in the Port
 81c:	8b e2       	ldi	r24, 0x2B	; 43
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	fc 01       	movw	r30, r24
 822:	10 82       	st	Z, r1

    //"Period"
    unsigned short Count = 0;
 824:	1a 82       	std	Y+2, r1	; 0x02
 826:	19 82       	std	Y+1, r1	; 0x01
    //Debugging Info
    char LRchar[4], UDchar[4];
    char LRRAWchar[6], UDRAWchar[6];

    //Initializing the 16x2 Custom Chars
    LCDdefinechar(Pencil, 1);
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	84 e8       	ldi	r24, 0x84	; 132
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	7a d1       	rcall	.+756    	; 0xb24 <LCDdefinechar>
    LCDdefinechar(Eraser, 2);
 830:	62 e0       	ldi	r22, 0x02	; 2
 832:	8c e8       	ldi	r24, 0x8C	; 140
 834:	92 e0       	ldi	r25, 0x02	; 2
 836:	76 d1       	rcall	.+748    	; 0xb24 <LCDdefinechar>
    LCDdefinechar(ClearAll16x2, 3);
 838:	63 e0       	ldi	r22, 0x03	; 3
 83a:	84 e9       	ldi	r24, 0x94	; 148
 83c:	92 e0       	ldi	r25, 0x02	; 2
 83e:	72 d1       	rcall	.+740    	; 0xb24 <LCDdefinechar>

    //Decides which to use (Debug Purposes) Dont need to reprogram EEPROM
    if(TESTING_EE)
 840:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <TESTING_EE>
 844:	88 23       	and	r24, r24
 846:	a1 f0       	breq	.+40     	; 0x870 <main+0xa8>
    {
        //Reads Contrast from EEPROM
        Contrast = eeprom_read_byte(&Contrast_EE);
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	82 d2       	rcall	.+1284   	; 0xd52 <eeprom_read_byte>
 84e:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <Contrast>
        LR_ADC_MAX = eeprom_read_word(&LR_ADC_MAX_EE);
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	85 d2       	rcall	.+1290   	; 0xd62 <eeprom_read_word>
 858:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <LR_ADC_MAX+0x1>
 85c:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <LR_ADC_MAX>
        UD_ADC_MAX = eeprom_read_word(&UD_ADC_MAX_EE);
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	7e d2       	rcall	.+1276   	; 0xd62 <eeprom_read_word>
 866:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <UD_ADC_MAX+0x1>
 86a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <UD_ADC_MAX>
 86e:	0f c0       	rjmp	.+30     	; 0x88e <main+0xc6>
    }
    else
    {
        //Hard Coded
        Contrast = 50;
 870:	82 e3       	ldi	r24, 0x32	; 50
 872:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <Contrast>
        UD_ADC_MAX = 1023;
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <UD_ADC_MAX+0x1>
 87e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <UD_ADC_MAX>
        LR_ADC_MAX = 986;
 882:	8a ed       	ldi	r24, 0xDA	; 218
 884:	93 e0       	ldi	r25, 0x03	; 3
 886:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <LR_ADC_MAX+0x1>
 88a:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <LR_ADC_MAX>
    }

    adc_init();
 88e:	07 d1       	rcall	.+526    	; 0xa9e <adc_init>
    LCD_init();
 890:	2c dd       	rcall	.-1448   	; 0x2ea <LCD_init>
    LcdInit();
 892:	08 de       	rcall	.-1008   	; 0x4a4 <LcdInit>

    LcdContrast(50);
 894:	82 e3       	ldi	r24, 0x32	; 50
 896:	65 de       	rcall	.-822    	; 0x562 <LcdContrast>
    LcdUpdate();
 898:	b7 de       	rcall	.-658    	; 0x608 <LcdUpdate>

    unsigned char CurrentMenuState = Menu_Start;
 89a:	1b 82       	std	Y+3, r1	; 0x03
    unsigned char CurrentSettingState = Setting_Start;
 89c:	1c 82       	std	Y+4, r1	; 0x04
    unsigned char CurrentDrawingState = Draw_Start;
 89e:	1d 82       	std	Y+5, r1	; 0x05
    
    LcdImage(StartImg);
 8a0:	8c e8       	ldi	r24, 0x8C	; 140
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	90 de       	rcall	.-736    	; 0x5c6 <LcdImage>
    LcdUpdate();
 8a6:	b0 de       	rcall	.-672    	; 0x608 <LcdUpdate>

    while (1)
    {
        Button1 = ~PINA & 4;
 8a8:	80 e2       	ldi	r24, 0x20	; 32
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	80 95       	com	r24
 8b2:	84 70       	andi	r24, 0x04	; 4
 8b4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button1>
        Button2 = ~PINA & 8;
 8b8:	80 e2       	ldi	r24, 0x20	; 32
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	fc 01       	movw	r30, r24
 8be:	80 81       	ld	r24, Z
 8c0:	80 95       	com	r24
 8c2:	88 70       	andi	r24, 0x08	; 8
 8c4:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Button2>
        Button3 = ~PINA & 16;
 8c8:	80 e2       	ldi	r24, 0x20	; 32
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	fc 01       	movw	r30, r24
 8ce:	80 81       	ld	r24, Z
 8d0:	80 95       	com	r24
 8d2:	80 71       	andi	r24, 0x10	; 16
 8d4:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <Button3>
        Button4 = ~PINA & 32;
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	fc 01       	movw	r30, r24
 8de:	80 81       	ld	r24, Z
 8e0:	80 95       	com	r24
 8e2:	80 72       	andi	r24, 0x20	; 32
 8e4:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <Button4>

        LeftRightRAW = adc_read(0);
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	ea d0       	rcall	.+468    	; 0xac0 <adc_read>
 8ec:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <LeftRightRAW+0x1>
 8f0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <LeftRightRAW>
        LeftRight = ADC_Scaler(LR_ADC_MAX, LeftRightRAW, 3);
 8f4:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <LeftRightRAW>
 8f8:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <LeftRightRAW+0x1>
 8fc:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <LR_ADC_MAX>
 900:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <LR_ADC_MAX+0x1>
 904:	43 e0       	ldi	r20, 0x03	; 3
 906:	b9 01       	movw	r22, r18
 908:	50 d1       	rcall	.+672    	; 0xbaa <ADC_Scaler>
 90a:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <LeftRight>

        UpDownRAW =  adc_read(1);
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	d7 d0       	rcall	.+430    	; 0xac0 <adc_read>
 912:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <UpDownRAW+0x1>
 916:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <UpDownRAW>
        UpDown = ADC_Scaler(UD_ADC_MAX, UpDownRAW, 3);
 91a:	20 91 34 04 	lds	r18, 0x0434	; 0x800434 <UpDownRAW>
 91e:	30 91 35 04 	lds	r19, 0x0435	; 0x800435 <UpDownRAW+0x1>
 922:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <UD_ADC_MAX>
 926:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <UD_ADC_MAX+0x1>
 92a:	43 e0       	ldi	r20, 0x03	; 3
 92c:	b9 01       	movw	r22, r18
 92e:	3d d1       	rcall	.+634    	; 0xbaa <ADC_Scaler>
 930:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <UpDown>
        //}
        //
        //
        //}

        char Buffer[32] = "LR:";
 934:	8c e4       	ldi	r24, 0x4C	; 76
 936:	92 e5       	ldi	r25, 0x52	; 82
 938:	aa e3       	ldi	r26, 0x3A	; 58
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	8a 8f       	std	Y+26, r24	; 0x1a
 93e:	9b 8f       	std	Y+27, r25	; 0x1b
 940:	ac 8f       	std	Y+28, r26	; 0x1c
 942:	bd 8f       	std	Y+29, r27	; 0x1d
 944:	2c e1       	ldi	r18, 0x1C	; 28
 946:	ce 01       	movw	r24, r28
 948:	4e 96       	adiw	r24, 0x1e	; 30
 94a:	fc 01       	movw	r30, r24
 94c:	32 2f       	mov	r19, r18
 94e:	11 92       	st	Z+, r1
 950:	3a 95       	dec	r19
 952:	e9 f7       	brne	.-6      	; 0x94e <main+0x186>

        itoa(LeftRight,LRchar,10);
 954:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <LeftRight>
 958:	88 2f       	mov	r24, r24
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	9e 01       	movw	r18, r28
 95e:	2a 5f       	subi	r18, 0xFA	; 250
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	4a e0       	ldi	r20, 0x0A	; 10
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	b9 01       	movw	r22, r18
 968:	b7 d1       	rcall	.+878    	; 0xcd8 <itoa>
        itoa(UpDown,UDchar,10);
 96a:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <UpDown>
 96e:	88 2f       	mov	r24, r24
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	9e 01       	movw	r18, r28
 974:	26 5f       	subi	r18, 0xF6	; 246
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	4a e0       	ldi	r20, 0x0A	; 10
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	b9 01       	movw	r22, r18
 97e:	ac d1       	rcall	.+856    	; 0xcd8 <itoa>

        itoa(LeftRightRAW,LRRAWchar,10);
 980:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <LeftRightRAW>
 984:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <LeftRightRAW+0x1>
 988:	9c 01       	movw	r18, r24
 98a:	ce 01       	movw	r24, r28
 98c:	0e 96       	adiw	r24, 0x0e	; 14
 98e:	4a e0       	ldi	r20, 0x0A	; 10
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	bc 01       	movw	r22, r24
 994:	c9 01       	movw	r24, r18
 996:	a0 d1       	rcall	.+832    	; 0xcd8 <itoa>
        itoa(UpDownRAW,UDRAWchar,10);
 998:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <UpDownRAW>
 99c:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <UpDownRAW+0x1>
 9a0:	9c 01       	movw	r18, r24
 9a2:	ce 01       	movw	r24, r28
 9a4:	44 96       	adiw	r24, 0x14	; 20
 9a6:	4a e0       	ldi	r20, 0x0A	; 10
 9a8:	50 e0       	ldi	r21, 0x00	; 0
 9aa:	bc 01       	movw	r22, r24
 9ac:	c9 01       	movw	r24, r18
 9ae:	94 d1       	rcall	.+808    	; 0xcd8 <itoa>

        strcat(Buffer,LRchar);
 9b0:	9e 01       	movw	r18, r28
 9b2:	2a 5f       	subi	r18, 0xFA	; 250
 9b4:	3f 4f       	sbci	r19, 0xFF	; 255
 9b6:	ce 01       	movw	r24, r28
 9b8:	4a 96       	adiw	r24, 0x1a	; 26
 9ba:	b9 01       	movw	r22, r18
 9bc:	82 d1       	rcall	.+772    	; 0xcc2 <strcat>
        strcat(Buffer, " ");
 9be:	ce 01       	movw	r24, r28
 9c0:	4a 96       	adiw	r24, 0x1a	; 26
 9c2:	9c 01       	movw	r18, r24
 9c4:	f9 01       	movw	r30, r18
 9c6:	01 90       	ld	r0, Z+
 9c8:	00 20       	and	r0, r0
 9ca:	e9 f7       	brne	.-6      	; 0x9c6 <main+0x1fe>
 9cc:	cf 01       	movw	r24, r30
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	82 1b       	sub	r24, r18
 9d2:	93 0b       	sbc	r25, r19
 9d4:	9e 01       	movw	r18, r28
 9d6:	26 5e       	subi	r18, 0xE6	; 230
 9d8:	3f 4f       	sbci	r19, 0xFF	; 255
 9da:	82 0f       	add	r24, r18
 9dc:	93 1f       	adc	r25, r19
 9de:	20 e2       	ldi	r18, 0x20	; 32
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	fc 01       	movw	r30, r24
 9e4:	31 83       	std	Z+1, r19	; 0x01
 9e6:	20 83       	st	Z, r18
        strcat(Buffer,LRRAWchar);
 9e8:	9e 01       	movw	r18, r28
 9ea:	22 5f       	subi	r18, 0xF2	; 242
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	ce 01       	movw	r24, r28
 9f0:	4a 96       	adiw	r24, 0x1a	; 26
 9f2:	b9 01       	movw	r22, r18
 9f4:	66 d1       	rcall	.+716    	; 0xcc2 <strcat>
        strcat(Buffer," UD:");
 9f6:	ce 01       	movw	r24, r28
 9f8:	4a 96       	adiw	r24, 0x1a	; 26
 9fa:	9c 01       	movw	r18, r24
 9fc:	f9 01       	movw	r30, r18
 9fe:	01 90       	ld	r0, Z+
 a00:	00 20       	and	r0, r0
 a02:	e9 f7       	brne	.-6      	; 0x9fe <main+0x236>
 a04:	cf 01       	movw	r24, r30
 a06:	01 97       	sbiw	r24, 0x01	; 1
 a08:	82 1b       	sub	r24, r18
 a0a:	93 0b       	sbc	r25, r19
 a0c:	9e 01       	movw	r18, r28
 a0e:	26 5e       	subi	r18, 0xE6	; 230
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	82 0f       	add	r24, r18
 a14:	93 1f       	adc	r25, r19
 a16:	25 e0       	ldi	r18, 0x05	; 5
 a18:	ee e1       	ldi	r30, 0x1E	; 30
 a1a:	f2 e0       	ldi	r31, 0x02	; 2
 a1c:	dc 01       	movw	r26, r24
 a1e:	01 90       	ld	r0, Z+
 a20:	0d 92       	st	X+, r0
 a22:	2a 95       	dec	r18
 a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x256>
        strcat(Buffer,UDchar);
 a26:	9e 01       	movw	r18, r28
 a28:	26 5f       	subi	r18, 0xF6	; 246
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	ce 01       	movw	r24, r28
 a2e:	4a 96       	adiw	r24, 0x1a	; 26
 a30:	b9 01       	movw	r22, r18
 a32:	47 d1       	rcall	.+654    	; 0xcc2 <strcat>
        strcat(Buffer, " ");
 a34:	ce 01       	movw	r24, r28
 a36:	4a 96       	adiw	r24, 0x1a	; 26
 a38:	9c 01       	movw	r18, r24
 a3a:	f9 01       	movw	r30, r18
 a3c:	01 90       	ld	r0, Z+
 a3e:	00 20       	and	r0, r0
 a40:	e9 f7       	brne	.-6      	; 0xa3c <main+0x274>
 a42:	cf 01       	movw	r24, r30
 a44:	01 97       	sbiw	r24, 0x01	; 1
 a46:	82 1b       	sub	r24, r18
 a48:	93 0b       	sbc	r25, r19
 a4a:	9e 01       	movw	r18, r28
 a4c:	26 5e       	subi	r18, 0xE6	; 230
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	82 0f       	add	r24, r18
 a52:	93 1f       	adc	r25, r19
 a54:	20 e2       	ldi	r18, 0x20	; 32
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	fc 01       	movw	r30, r24
 a5a:	31 83       	std	Z+1, r19	; 0x01
 a5c:	20 83       	st	Z, r18
        strcat(Buffer,UDRAWchar);
 a5e:	9e 01       	movw	r18, r28
 a60:	2c 5e       	subi	r18, 0xEC	; 236
 a62:	3f 4f       	sbci	r19, 0xFF	; 255
 a64:	ce 01       	movw	r24, r28
 a66:	4a 96       	adiw	r24, 0x1a	; 26
 a68:	b9 01       	movw	r22, r18
 a6a:	2b d1       	rcall	.+598    	; 0xcc2 <strcat>

        if(Count == 500)
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	9a 81       	ldd	r25, Y+2	; 0x02
 a70:	84 3f       	cpi	r24, 0xF4	; 244
 a72:	91 40       	sbci	r25, 0x01	; 1
 a74:	71 f4       	brne	.+28     	; 0xa92 <main+0x2ca>
        {

            LcdContrast(Contrast);
 a76:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <Contrast>
 a7a:	73 dd       	rcall	.-1306   	; 0x562 <LcdContrast>
            LcdImage(StartImg);
 a7c:	8c e8       	ldi	r24, 0x8C	; 140
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	a2 dd       	rcall	.-1212   	; 0x5c6 <LcdImage>
            LcdUpdate();
 a82:	c2 dd       	rcall	.-1148   	; 0x608 <LcdUpdate>

            LCD_DisplayString(1,Buffer);
 a84:	ce 01       	movw	r24, r28
 a86:	4a 96       	adiw	r24, 0x1a	; 26
 a88:	bc 01       	movw	r22, r24
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	9f dc       	rcall	.-1730   	; 0x3cc <LCD_DisplayString>

            Count = 0;
 a8e:	1a 82       	std	Y+2, r1	; 0x02
 a90:	19 82       	std	Y+1, r1	; 0x01
        }

        Count++;
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	9a 81       	ldd	r25, Y+2	; 0x02
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	9a 83       	std	Y+2, r25	; 0x02
 a9a:	89 83       	std	Y+1, r24	; 0x01
    }
 a9c:	05 cf       	rjmp	.-502    	; 0x8a8 <main+0xe0>

00000a9e <adc_init>:
}

void adc_init()
{
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 aa6:	8c e7       	ldi	r24, 0x7C	; 124
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	20 e4       	ldi	r18, 0x40	; 64
 aac:	fc 01       	movw	r30, r24
 aae:	20 83       	st	Z, r18

    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 ab0:	8a e7       	ldi	r24, 0x7A	; 122
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	27 e8       	ldi	r18, 0x87	; 135
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18
}
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	1f 92       	push	r1
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
 aca:	89 83       	std	Y+1, r24	; 0x01
    // select the corresponding channel 0~7
    // ANDing with ⷿ will always keep the value
    // of ᣨ⠢etween 0 and 7
    ch &= 0b00000111;  // AND operation with 7
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	87 70       	andi	r24, 0x07	; 7
 ad0:	89 83       	std	Y+1, r24	; 0x01
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 ad2:	8c e7       	ldi	r24, 0x7C	; 124
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	2c e7       	ldi	r18, 0x7C	; 124
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	f9 01       	movw	r30, r18
 adc:	20 81       	ld	r18, Z
 ade:	32 2f       	mov	r19, r18
 ae0:	38 7f       	andi	r19, 0xF8	; 248
 ae2:	29 81       	ldd	r18, Y+1	; 0x01
 ae4:	23 2b       	or	r18, r19
 ae6:	fc 01       	movw	r30, r24
 ae8:	20 83       	st	Z, r18

    // start single convertion
    // write Ɀ to ADSC
    ADCSRA |= (1<<ADSC);
 aea:	8a e7       	ldi	r24, 0x7A	; 122
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	2a e7       	ldi	r18, 0x7A	; 122
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	f9 01       	movw	r30, r18
 af4:	20 81       	ld	r18, Z
 af6:	20 64       	ori	r18, 0x40	; 64
 af8:	fc 01       	movw	r30, r24
 afa:	20 83       	st	Z, r18

    // wait for conversion to complete
    // ADSC becomes ⰿ again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 afc:	00 00       	nop
 afe:	8a e7       	ldi	r24, 0x7A	; 122
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	fc 01       	movw	r30, r24
 b04:	80 81       	ld	r24, Z
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	80 74       	andi	r24, 0x40	; 64
 b0c:	99 27       	eor	r25, r25
 b0e:	89 2b       	or	r24, r25
 b10:	b1 f7       	brne	.-20     	; 0xafe <adc_read+0x3e>

    return (ADC);
 b12:	88 e7       	ldi	r24, 0x78	; 120
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	fc 01       	movw	r30, r24
 b18:	80 81       	ld	r24, Z
 b1a:	91 81       	ldd	r25, Z+1	; 0x01
}
 b1c:	0f 90       	pop	r0
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	08 95       	ret

00000b24 <LCDdefinechar>:

void LCDdefinechar(const uint8_t *pc, uint8_t char_code)
{
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
 b2c:	2a 97       	sbiw	r28, 0x0a	; 10
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	99 87       	std	Y+9, r25	; 0x09
 b3a:	88 87       	std	Y+8, r24	; 0x08
 b3c:	6a 87       	std	Y+10, r22	; 0x0a
    uint8_t a, pcc;
    uint16_t i;
    a=(char_code<<3)|0x40;
 b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
 b40:	88 2f       	mov	r24, r24
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	88 0f       	add	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	80 64       	ori	r24, 0x40	; 64
 b52:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<8; i++)
 b54:	1b 82       	std	Y+3, r1	; 0x03
 b56:	1a 82       	std	Y+2, r1	; 0x02
 b58:	1b c0       	rjmp	.+54     	; 0xb90 <LCDdefinechar+0x6c>
    {
        pcc=pgm_read_byte(&pc[i]);
 b5a:	28 85       	ldd	r18, Y+8	; 0x08
 b5c:	39 85       	ldd	r19, Y+9	; 0x09
 b5e:	8a 81       	ldd	r24, Y+2	; 0x02
 b60:	9b 81       	ldd	r25, Y+3	; 0x03
 b62:	82 0f       	add	r24, r18
 b64:	93 1f       	adc	r25, r19
 b66:	9d 83       	std	Y+5, r25	; 0x05
 b68:	8c 83       	std	Y+4, r24	; 0x04
 b6a:	8c 81       	ldd	r24, Y+4	; 0x04
 b6c:	9d 81       	ldd	r25, Y+5	; 0x05
 b6e:	fc 01       	movw	r30, r24
 b70:	84 91       	lpm	r24, Z
 b72:	8e 83       	std	Y+6, r24	; 0x06
 b74:	8e 81       	ldd	r24, Y+6	; 0x06
 b76:	8f 83       	std	Y+7, r24	; 0x07
        LCD_WriteCommand(a++);
 b78:	89 81       	ldd	r24, Y+1	; 0x01
 b7a:	91 e0       	ldi	r25, 0x01	; 1
 b7c:	98 0f       	add	r25, r24
 b7e:	99 83       	std	Y+1, r25	; 0x01
 b80:	c9 db       	rcall	.-2158   	; 0x314 <LCD_WriteCommand>
        LCD_WriteData(pcc);
 b82:	8f 81       	ldd	r24, Y+7	; 0x07
 b84:	f5 db       	rcall	.-2070   	; 0x370 <LCD_WriteData>
void LCDdefinechar(const uint8_t *pc, uint8_t char_code)
{
    uint8_t a, pcc;
    uint16_t i;
    a=(char_code<<3)|0x40;
    for (i=0; i<8; i++)
 b86:	8a 81       	ldd	r24, Y+2	; 0x02
 b88:	9b 81       	ldd	r25, Y+3	; 0x03
 b8a:	01 96       	adiw	r24, 0x01	; 1
 b8c:	9b 83       	std	Y+3, r25	; 0x03
 b8e:	8a 83       	std	Y+2, r24	; 0x02
 b90:	8a 81       	ldd	r24, Y+2	; 0x02
 b92:	9b 81       	ldd	r25, Y+3	; 0x03
 b94:	08 97       	sbiw	r24, 0x08	; 8
 b96:	08 f3       	brcs	.-62     	; 0xb5a <LCDdefinechar+0x36>
    {
        pcc=pgm_read_byte(&pc[i]);
        LCD_WriteCommand(a++);
        LCD_WriteData(pcc);
    }
}
 b98:	2a 96       	adiw	r28, 0x0a	; 10
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <ADC_Scaler>:

unsigned short ADC_Scaler(unsigned short ADC_Max, unsigned short ADC_Val, unsigned char Divider)
{
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	2b 97       	sbiw	r28, 0x0b	; 11
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	f8 94       	cli
 bb8:	de bf       	out	0x3e, r29	; 62
 bba:	0f be       	out	0x3f, r0	; 63
 bbc:	cd bf       	out	0x3d, r28	; 61
 bbe:	9e 83       	std	Y+6, r25	; 0x06
 bc0:	8d 83       	std	Y+5, r24	; 0x05
 bc2:	78 87       	std	Y+8, r23	; 0x08
 bc4:	6f 83       	std	Y+7, r22	; 0x07
 bc6:	49 87       	std	Y+9, r20	; 0x09
    unsigned short Div = ADC_Max / Divider;
 bc8:	89 85       	ldd	r24, Y+9	; 0x09
 bca:	28 2f       	mov	r18, r24
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	8d 81       	ldd	r24, Y+5	; 0x05
 bd0:	9e 81       	ldd	r25, Y+6	; 0x06
 bd2:	b9 01       	movw	r22, r18
 bd4:	3f d0       	rcall	.+126    	; 0xc54 <__udivmodhi4>
 bd6:	cb 01       	movw	r24, r22
 bd8:	9c 83       	std	Y+4, r25	; 0x04
 bda:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char Position;

    for(unsigned char index = 1; index <= Divider; index++)
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	8a 83       	std	Y+2, r24	; 0x02
 be0:	29 c0       	rjmp	.+82     	; 0xc34 <ADC_Scaler+0x8a>
    {
        //Sets boundaries
        if((ADC_Val <= index*Div) && (ADC_Val >= (index-1)*Div) )
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
 be4:	48 2f       	mov	r20, r24
 be6:	50 e0       	ldi	r21, 0x00	; 0
 be8:	8b 81       	ldd	r24, Y+3	; 0x03
 bea:	9c 81       	ldd	r25, Y+4	; 0x04
 bec:	48 9f       	mul	r20, r24
 bee:	90 01       	movw	r18, r0
 bf0:	49 9f       	mul	r20, r25
 bf2:	30 0d       	add	r19, r0
 bf4:	58 9f       	mul	r21, r24
 bf6:	30 0d       	add	r19, r0
 bf8:	11 24       	eor	r1, r1
 bfa:	8f 81       	ldd	r24, Y+7	; 0x07
 bfc:	98 85       	ldd	r25, Y+8	; 0x08
 bfe:	28 17       	cp	r18, r24
 c00:	39 07       	cpc	r19, r25
 c02:	a8 f0       	brcs	.+42     	; 0xc2e <ADC_Scaler+0x84>
 c04:	8a 81       	ldd	r24, Y+2	; 0x02
 c06:	88 2f       	mov	r24, r24
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	01 97       	sbiw	r24, 0x01	; 1
 c0c:	ac 01       	movw	r20, r24
 c0e:	8b 81       	ldd	r24, Y+3	; 0x03
 c10:	9c 81       	ldd	r25, Y+4	; 0x04
 c12:	48 9f       	mul	r20, r24
 c14:	90 01       	movw	r18, r0
 c16:	49 9f       	mul	r20, r25
 c18:	30 0d       	add	r19, r0
 c1a:	58 9f       	mul	r21, r24
 c1c:	30 0d       	add	r19, r0
 c1e:	11 24       	eor	r1, r1
 c20:	8f 81       	ldd	r24, Y+7	; 0x07
 c22:	98 85       	ldd	r25, Y+8	; 0x08
 c24:	82 17       	cp	r24, r18
 c26:	93 07       	cpc	r25, r19
 c28:	10 f0       	brcs	.+4      	; 0xc2e <ADC_Scaler+0x84>
        {
            Position = index;
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	89 83       	std	Y+1, r24	; 0x01
unsigned short ADC_Scaler(unsigned short ADC_Max, unsigned short ADC_Val, unsigned char Divider)
{
    unsigned short Div = ADC_Max / Divider;
    unsigned char Position;

    for(unsigned char index = 1; index <= Divider; index++)
 c2e:	8a 81       	ldd	r24, Y+2	; 0x02
 c30:	8f 5f       	subi	r24, 0xFF	; 255
 c32:	8a 83       	std	Y+2, r24	; 0x02
 c34:	9a 81       	ldd	r25, Y+2	; 0x02
 c36:	89 85       	ldd	r24, Y+9	; 0x09
 c38:	89 17       	cp	r24, r25
 c3a:	98 f6       	brcc	.-90     	; 0xbe2 <ADC_Scaler+0x38>
        if((ADC_Val <= index*Div) && (ADC_Val >= (index-1)*Div) )
        {
            Position = index;
        }
    }
    return Position;
 c3c:	89 81       	ldd	r24, Y+1	; 0x01
 c3e:	88 2f       	mov	r24, r24
 c40:	90 e0       	ldi	r25, 0x00	; 0
}
 c42:	2b 96       	adiw	r28, 0x0b	; 11
 c44:	0f b6       	in	r0, 0x3f	; 63
 c46:	f8 94       	cli
 c48:	de bf       	out	0x3e, r29	; 62
 c4a:	0f be       	out	0x3f, r0	; 63
 c4c:	cd bf       	out	0x3d, r28	; 61
 c4e:	df 91       	pop	r29
 c50:	cf 91       	pop	r28
 c52:	08 95       	ret

00000c54 <__udivmodhi4>:
 c54:	aa 1b       	sub	r26, r26
 c56:	bb 1b       	sub	r27, r27
 c58:	51 e1       	ldi	r21, 0x11	; 17
 c5a:	07 c0       	rjmp	.+14     	; 0xc6a <__udivmodhi4_ep>

00000c5c <__udivmodhi4_loop>:
 c5c:	aa 1f       	adc	r26, r26
 c5e:	bb 1f       	adc	r27, r27
 c60:	a6 17       	cp	r26, r22
 c62:	b7 07       	cpc	r27, r23
 c64:	10 f0       	brcs	.+4      	; 0xc6a <__udivmodhi4_ep>
 c66:	a6 1b       	sub	r26, r22
 c68:	b7 0b       	sbc	r27, r23

00000c6a <__udivmodhi4_ep>:
 c6a:	88 1f       	adc	r24, r24
 c6c:	99 1f       	adc	r25, r25
 c6e:	5a 95       	dec	r21
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__udivmodhi4_loop>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	bc 01       	movw	r22, r24
 c78:	cd 01       	movw	r24, r26
 c7a:	08 95       	ret

00000c7c <__divmodhi4>:
 c7c:	97 fb       	bst	r25, 7
 c7e:	07 2e       	mov	r0, r23
 c80:	16 f4       	brtc	.+4      	; 0xc86 <__divmodhi4+0xa>
 c82:	00 94       	com	r0
 c84:	06 d0       	rcall	.+12     	; 0xc92 <__divmodhi4_neg1>
 c86:	77 fd       	sbrc	r23, 7
 c88:	08 d0       	rcall	.+16     	; 0xc9a <__divmodhi4_neg2>
 c8a:	e4 df       	rcall	.-56     	; 0xc54 <__udivmodhi4>
 c8c:	07 fc       	sbrc	r0, 7
 c8e:	05 d0       	rcall	.+10     	; 0xc9a <__divmodhi4_neg2>
 c90:	3e f4       	brtc	.+14     	; 0xca0 <__divmodhi4_exit>

00000c92 <__divmodhi4_neg1>:
 c92:	90 95       	com	r25
 c94:	81 95       	neg	r24
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <__divmodhi4_neg2>:
 c9a:	70 95       	com	r23
 c9c:	61 95       	neg	r22
 c9e:	7f 4f       	sbci	r23, 0xFF	; 255

00000ca0 <__divmodhi4_exit>:
 ca0:	08 95       	ret

00000ca2 <memcpy_P>:
 ca2:	fb 01       	movw	r30, r22
 ca4:	dc 01       	movw	r26, r24
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <memcpy_P+0xa>
 ca8:	05 90       	lpm	r0, Z+
 caa:	0d 92       	st	X+, r0
 cac:	41 50       	subi	r20, 0x01	; 1
 cae:	50 40       	sbci	r21, 0x00	; 0
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <memcpy_P+0x6>
 cb2:	08 95       	ret

00000cb4 <memset>:
 cb4:	dc 01       	movw	r26, r24
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <memset+0x6>
 cb8:	6d 93       	st	X+, r22
 cba:	41 50       	subi	r20, 0x01	; 1
 cbc:	50 40       	sbci	r21, 0x00	; 0
 cbe:	e0 f7       	brcc	.-8      	; 0xcb8 <memset+0x4>
 cc0:	08 95       	ret

00000cc2 <strcat>:
 cc2:	fb 01       	movw	r30, r22
 cc4:	dc 01       	movw	r26, r24
 cc6:	0d 90       	ld	r0, X+
 cc8:	00 20       	and	r0, r0
 cca:	e9 f7       	brne	.-6      	; 0xcc6 <strcat+0x4>
 ccc:	11 97       	sbiw	r26, 0x01	; 1
 cce:	01 90       	ld	r0, Z+
 cd0:	0d 92       	st	X+, r0
 cd2:	00 20       	and	r0, r0
 cd4:	e1 f7       	brne	.-8      	; 0xcce <strcat+0xc>
 cd6:	08 95       	ret

00000cd8 <itoa>:
 cd8:	45 32       	cpi	r20, 0x25	; 37
 cda:	51 05       	cpc	r21, r1
 cdc:	18 f4       	brcc	.+6      	; 0xce4 <itoa+0xc>
 cde:	42 30       	cpi	r20, 0x02	; 2
 ce0:	08 f0       	brcs	.+2      	; 0xce4 <itoa+0xc>
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <__itoa_ncheck>
 ce4:	fb 01       	movw	r30, r22
 ce6:	10 82       	st	Z, r1
 ce8:	cb 01       	movw	r24, r22
 cea:	08 95       	ret

00000cec <__itoa_ncheck>:
 cec:	bb 27       	eor	r27, r27
 cee:	4a 30       	cpi	r20, 0x0A	; 10
 cf0:	31 f4       	brne	.+12     	; 0xcfe <__itoa_ncheck+0x12>
 cf2:	99 23       	and	r25, r25
 cf4:	22 f4       	brpl	.+8      	; 0xcfe <__itoa_ncheck+0x12>
 cf6:	bd e2       	ldi	r27, 0x2D	; 45
 cf8:	90 95       	com	r25
 cfa:	81 95       	neg	r24
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	01 c0       	rjmp	.+2      	; 0xd02 <__utoa_common>

00000d00 <__utoa_ncheck>:
 d00:	bb 27       	eor	r27, r27

00000d02 <__utoa_common>:
 d02:	fb 01       	movw	r30, r22
 d04:	55 27       	eor	r21, r21
 d06:	aa 27       	eor	r26, r26
 d08:	88 0f       	add	r24, r24
 d0a:	99 1f       	adc	r25, r25
 d0c:	aa 1f       	adc	r26, r26
 d0e:	a4 17       	cp	r26, r20
 d10:	10 f0       	brcs	.+4      	; 0xd16 <__utoa_common+0x14>
 d12:	a4 1b       	sub	r26, r20
 d14:	83 95       	inc	r24
 d16:	50 51       	subi	r21, 0x10	; 16
 d18:	b9 f7       	brne	.-18     	; 0xd08 <__utoa_common+0x6>
 d1a:	a0 5d       	subi	r26, 0xD0	; 208
 d1c:	aa 33       	cpi	r26, 0x3A	; 58
 d1e:	08 f0       	brcs	.+2      	; 0xd22 <__utoa_common+0x20>
 d20:	a9 5d       	subi	r26, 0xD9	; 217
 d22:	a1 93       	st	Z+, r26
 d24:	00 97       	sbiw	r24, 0x00	; 0
 d26:	79 f7       	brne	.-34     	; 0xd06 <__utoa_common+0x4>
 d28:	b1 11       	cpse	r27, r1
 d2a:	b1 93       	st	Z+, r27
 d2c:	11 92       	st	Z+, r1
 d2e:	cb 01       	movw	r24, r22
 d30:	00 c0       	rjmp	.+0      	; 0xd32 <strrev>

00000d32 <strrev>:
 d32:	dc 01       	movw	r26, r24
 d34:	fc 01       	movw	r30, r24
 d36:	67 2f       	mov	r22, r23
 d38:	71 91       	ld	r23, Z+
 d3a:	77 23       	and	r23, r23
 d3c:	e1 f7       	brne	.-8      	; 0xd36 <strrev+0x4>
 d3e:	32 97       	sbiw	r30, 0x02	; 2
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <strrev+0x18>
 d42:	7c 91       	ld	r23, X
 d44:	6d 93       	st	X+, r22
 d46:	70 83       	st	Z, r23
 d48:	62 91       	ld	r22, -Z
 d4a:	ae 17       	cp	r26, r30
 d4c:	bf 07       	cpc	r27, r31
 d4e:	c8 f3       	brcs	.-14     	; 0xd42 <strrev+0x10>
 d50:	08 95       	ret

00000d52 <eeprom_read_byte>:
 d52:	f9 99       	sbic	0x1f, 1	; 31
 d54:	fe cf       	rjmp	.-4      	; 0xd52 <eeprom_read_byte>
 d56:	92 bd       	out	0x22, r25	; 34
 d58:	81 bd       	out	0x21, r24	; 33
 d5a:	f8 9a       	sbi	0x1f, 0	; 31
 d5c:	99 27       	eor	r25, r25
 d5e:	80 b5       	in	r24, 0x20	; 32
 d60:	08 95       	ret

00000d62 <eeprom_read_word>:
 d62:	a8 e1       	ldi	r26, 0x18	; 24
 d64:	b0 e0       	ldi	r27, 0x00	; 0
 d66:	42 e0       	ldi	r20, 0x02	; 2
 d68:	50 e0       	ldi	r21, 0x00	; 0
 d6a:	02 c0       	rjmp	.+4      	; 0xd70 <eeprom_read_blraw>

00000d6c <eeprom_read_block>:
 d6c:	dc 01       	movw	r26, r24
 d6e:	cb 01       	movw	r24, r22

00000d70 <eeprom_read_blraw>:
 d70:	fc 01       	movw	r30, r24
 d72:	f9 99       	sbic	0x1f, 1	; 31
 d74:	fe cf       	rjmp	.-4      	; 0xd72 <eeprom_read_blraw+0x2>
 d76:	06 c0       	rjmp	.+12     	; 0xd84 <eeprom_read_blraw+0x14>
 d78:	f2 bd       	out	0x22, r31	; 34
 d7a:	e1 bd       	out	0x21, r30	; 33
 d7c:	f8 9a       	sbi	0x1f, 0	; 31
 d7e:	31 96       	adiw	r30, 0x01	; 1
 d80:	00 b4       	in	r0, 0x20	; 32
 d82:	0d 92       	st	X+, r0
 d84:	41 50       	subi	r20, 0x01	; 1
 d86:	50 40       	sbci	r21, 0x00	; 0
 d88:	b8 f7       	brcc	.-18     	; 0xd78 <eeprom_read_blraw+0x8>
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
